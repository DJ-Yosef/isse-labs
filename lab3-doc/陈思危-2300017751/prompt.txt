# AI开发提示词记录

## 主要提示词

```
请你仿照ppt要求，在我的文件夹下面进行开发，使用python语言

一、任务说明
复刻课堂示例（ToDoList 或 日记本），完成一个可运行的前后端系统。
任选一个方向：
- ✅ ToDoList：添加、删除、标记完成、按优先级和分类展示
- ✅ 日记本：新增、查看、删除、按标签或心情分类

二、技术要求
- 后端使用 Flask ，运行在 localhost:5000，接口返回 JSON。
- 前端使用 HTML + JS + fetch 调用接口，实现完整交互。
- 建议先写后端接口、测试通过后再接前端。

三、目录结构
请在仓库 lab3-doc/ 下新建文件夹：
lab3-doc/
└── 李华-230111234/
    ├── prompt.txt         # 使用的AI提示词
    ├── screenshot.png     # 功能运行截图
    ├── README.md          # 简短运行说明
    └── project/           # 项目代码目录
        ├── app.py
        ├── index.html
        ├── script.js
        └── style.css

四、提交要求
1. 记录开发过程：至少 3 次以上 Git 提交（commit），初始化、后端开发、前端开发均至少一次。
```

## 开发过程

### 1. 需求分析
- 选择TodoList方向
- 确定核心功能：CRUD操作、优先级管理、分类管理、状态切换
- 设计RESTful API接口

### 2. 后端开发 (app.py)
- 使用Flask框架
- 实现7个主要API端点：
  - GET /api/todos - 获取任务列表（支持筛选）
  - POST /api/todos - 创建新任务
  - PUT /api/todos/{id} - 更新任务
  - DELETE /api/todos/{id} - 删除任务
  - PUT /api/todos/{id}/toggle - 切换完成状态
  - GET /api/categories - 获取分类列表
  - GET /api/stats - 获取统计信息
- 使用JSON文件进行数据持久化
- 配置CORS支持跨域请求

### 3. 前端开发
- **index.html**: 响应式布局，包含任务表单、筛选器、任务列表、编辑模态框
- **style.css**: 现代化UI设计，渐变背景、卡片式布局、优先级颜色标识
- **script.js**: 完整的前端逻辑，包括API调用、DOM操作、事件处理、筛选功能

### 4. 功能特性
- 任务增删改查
- 三级优先级（高/中/低）
- 自定义分类
- 多维度筛选（分类、优先级、状态）
- 实时统计
- 编辑模态框
- 响应式设计
- 用户友好的提示信息

### 5. 技术亮点
- RESTful API设计
- 前后端分离架构
- 原生JavaScript实现（无框架依赖）
- JSON数据持久化
- CSS3现代化样式
- 移动端适配

## 辅助提示词

在开发过程中还使用了以下辅助提示：

1. "创建Flask后端API，实现TodoList的CRUD操作"
2. "设计现代化的前端界面，支持优先级和分类管理"
3. "实现前端JavaScript逻辑，调用后端API"
4. "添加响应式设计和用户体验优化"
5. "完善错误处理和用户提示功能"

## 开发心得

通过AI辅助开发，能够快速搭建完整的前后端系统，AI能够：
- 提供标准的API设计模式
- 生成结构良好的代码
- 实现现代化的UI/UX设计
- 处理各种边界情况和错误处理
- 提供完整的项目文档

这大大提高了开发效率，让开发者能够专注于业务逻辑和用户体验的优化。






根据要求，进一步丰富后端的功能，对于todolist进行更详细的记录，可以增加ddl，重要程度，并支持排序
下面根据你刚才添加的功能，修改对应的前端代码。
非常好！每次添加或者删除任务后不要再有一个确定按钮，同时对前端进行美化，比如时间选择部分，此外去除创建时间，让任务看上去更舒服一些
